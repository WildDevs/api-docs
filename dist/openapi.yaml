openapi: 3.0.0
info:
  version: 1.0.1
  title: Wild Devs API
  description: |
    High Performance & High Security API by [Wild-Devs](https://wild-devs.net). 

    <h3>API For Everyone</h3>
    <div style="border: 1px dashed grey; padding: 10px; background-color: #f0f0f0;">
      This API is open for everyone without providing any api-key, but also includes member and subscriber endpoints. For those you need an api-key to query the desired endpoints, they are also marked with a lock in this API documentation.

      You can <a href='https://wild-devs.net/register' target='_blank'>sign up</a> and generate own api key for free, which also increases your rate-limit.
      
      To communicate with some endpoints of our api, you must combine your "key" with your "secret" separated by a colon and encode it with base64. Provide the base64 string as `x-api-key` with the request header.
    </div>

    <h3>Rate-Limits</h3>
    <div style="border: 1px dashed grey; padding: 10px; background-color: #f0f0f0;">
      A rate limit is the number of API calls an app or user can make within a given time period. If this limit is exceeded or if CPU or total time limits are exceeded, the app or user may be throttled. API requests made by a throttled user or app will fail. All API requests are subject to rate limits.
      Our rates are quite fair and divided into 3 categories.

      **All limits last 24h, starting from the first request**

      - Public: **100** requests
      - Member: **300** requests
      - Subscriber: Silver: **2.500** requests
      - Subscriber: Gold: **6.000** requests
      - Subscriber: Platinum: **18.000** requests

      Every endpoint will report the current state of your rate. Following information can be found in the response header:
      
      - x-ratelimit-retry-after
      - x-ratelimit-limit
      - x-ratelimit-remaining
      - x-ratelimit-reset
    </div>

    <h3>Response Formats</h3>
    <div style="border: 1px dashed grey; padding: 10px; background-color: #f0f0f0;">
      We support two response formats:

      In general, all responses are in `JSON` format, **subscribers** also can get them in `XML` format. Just add `xml` as query parameter to the request url.
      
      Example: `https://api.wild-devs.net/v1/geoip/37.120.190.250?xml`
    </div>

    <h3>Support</h3>
    <div style="border: 1px dashed grey; padding: 10px; background-color: #f0f0f0;">
      If you need any support, you can join our <a href='https://discord.wild-devs.net' target='_blank'>Discord</a>. Here, you can connect with other developers who are also using our API and get help with any issues you may be experiencing. Our community is full of knowledgeable developers who are eager to share their expertise and help you succeed. Of course we also offer support via <a href='mailto:support@wild-devs.net'>email</a> or our <a href='https://help.wild-devs.net' target='_blank'>support ticket center</a> and are available to answer your questions.
    </div>
  contact:
    name: API Support
    url: 'https://help.wild-devs.net/'
    email: support@wild-devs.net
servers:
  - url: 'https://api.wild-devs.net/v1'
    description: API Production Server
paths:
  /dictionary:
    post:
      summary: Describes a given word for a desired language
      operationId: dictionary
      description: |
        `Subscriber` Only Endpoint. API-Key is needed. This endpoint consumes AI tokens (depends on the output length).

        Provide a word + language and the AI will describe the word. The output is in the same language as the word.

        Supported languages:
        ```
        Afrikaans
        Albanian
        Arabic
        Armenian
        Assamese
        Azerbaijani
        Basque
        Belarusian
        Bengali
        Bosnian
        Bulgarian
        Burmese
        Cantonese
        Catalan
        Cebuano
        Chichewa
        Chinese
        Corsican
        Croatian
        Czech
        Danish
        Dutch
        English
        Esperanto
        Estonian
        Filipino
        Finnish
        French
        Frisian
        Galician
        Georgian
        German
        Greek
        Gujarati
        Haitian Creole
        Hausa
        Hawaiian
        Hebrew
        Hindi
        Hmong
        Hungarian
        Icelandic
        Igbo
        Indonesian
        Irish
        Italian
        Japanese
        Javanese
        Kannada
        Kazakh
        Khmer
        Kinyarwanda
        Korean
        Kurdish
        Kyrgyz
        Lao
        Latin
        Latvian
        Lithuanian
        Luxembourgish
        Macedonian
        Malagasy
        Malay
        Malayalam
        Maltese
        Maori
        Marathi
        Mongolian
        Myanmar
        Nepali
        Norwegian
        Nyanja
        Odia
        Pashto
        Persian
        Polish
        Portuguese
        Punjabi
        Romanian
        Russian
        Samoan
        Scots Gaelic
        Serbian
        Sesotho
        Shona
        Sindhi
        Sinhala
        Slovak
        Slovenian
        Somali
        Spanish
        Sundanese
        Swahili
        Swedish
        Tajik
        Tamil
        Tatar
        Telugu
        Thai
        Turkish
        Turkmen
        Ukrainian
        Urdu
        Uyghur
        Uzbek
        Vietnamese
        Welsh
        Xhosa
        Yiddish
        Yoruba
        Zulu
        ```
      tags:
        - AI
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                word:
                  type: string
                  description: 'Any word, no phrase!'
                  example: Car
                language:
                  type: string
                  description: Choose one of the over 100 supported languages. The word should be in the same language.
                  example: English
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: string
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /synonyms:
    post:
      summary: Finds synonyms for the given word
      operationId: synonyms
      description: |
        `Subscriber` Only Endpoint. API-Key is needed. This endpoint consumes AI tokens (depends on the output length).

        Provide a word + language and the AI will find synonyms for the word. The output is in the same language as the word.

        Supported languages:
        ```
        Afrikaans
        Albanian
        Arabic
        Armenian
        Assamese
        Azerbaijani
        Basque
        Belarusian
        Bengali
        Bosnian
        Bulgarian
        Burmese
        Cantonese
        Catalan
        Cebuano
        Chichewa
        Chinese
        Corsican
        Croatian
        Czech
        Danish
        Dutch
        English
        Esperanto
        Estonian
        Filipino
        Finnish
        French
        Frisian
        Galician
        Georgian
        German
        Greek
        Gujarati
        Haitian Creole
        Hausa
        Hawaiian
        Hebrew
        Hindi
        Hmong
        Hungarian
        Icelandic
        Igbo
        Indonesian
        Irish
        Italian
        Japanese
        Javanese
        Kannada
        Kazakh
        Khmer
        Kinyarwanda
        Korean
        Kurdish
        Kyrgyz
        Lao
        Latin
        Latvian
        Lithuanian
        Luxembourgish
        Macedonian
        Malagasy
        Malay
        Malayalam
        Maltese
        Maori
        Marathi
        Mongolian
        Myanmar
        Nepali
        Norwegian
        Nyanja
        Odia
        Pashto
        Persian
        Polish
        Portuguese
        Punjabi
        Romanian
        Russian
        Samoan
        Scots Gaelic
        Serbian
        Sesotho
        Shona
        Sindhi
        Sinhala
        Slovak
        Slovenian
        Somali
        Spanish
        Sundanese
        Swahili
        Swedish
        Tajik
        Tamil
        Tatar
        Telugu
        Thai
        Turkish
        Turkmen
        Ukrainian
        Urdu
        Uyghur
        Uzbek
        Vietnamese
        Welsh
        Xhosa
        Yiddish
        Yoruba
        Zulu
        ```
      tags:
        - AI
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                word:
                  type: string
                  description: 'Any word, no phrase!'
                  example: Car
                language:
                  type: string
                  description: Choose one of the over 100 supported languages. The word should be in the same language.
                  example: English
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: string
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /currency:
    post:
      summary: Convert an amount from one currency to another currency
      operationId: currency
      description: |
        `Subscriber` Only Endpoint. API-Key is needed.

        Supported currencies:
        ```
        AED (United Arab Emirates Dirham)
        AFN (Afghan Afghani)
        ALL (Albanian Lek)
        AMD (Armenian Dram)
        ANG (Netherlands Antillean Guilder)
        AOA (Angolan Kwanza)
        ARS (Argentine Peso)
        AUD (Australian Dollar)
        AWG (Aruban Florin)
        AZN (Azerbaijani Manat)
        BAM (Bosnia-Herzegovina Convertible Mark)
        BBD (Barbadian Dollar)
        BDT (Bangladeshi Taka)
        BGN (Bulgarian Lev)
        BHD (Bahraini Dinar)
        BIF (Burundian Franc)
        BMD (Bermudan Dollar)
        BND (Brunei Dollar)
        BOB (Bolivian Boliviano)
        BRL (Brazilian Real)
        BSD (Bahamian Dollar)
        BTC (Bitcoin)
        BTN (Bhutanese Ngultrum)
        BWP (Botswanan Pula)
        BYN (Belarusian Ruble)
        BZD (Belize Dollar)
        CAD (Canadian Dollar)
        CDF (Congolese Franc)
        CHF (Swiss Franc)
        CLF (Chilean Unit of Account (UF))
        CLP (Chilean Peso)
        CNH (Chinese Yuan (Offshore))
        CNY (Chinese Yuan)
        COP (Colombian Peso)
        CRC (Costa Rican Colón)
        CUC (Cuban Convertible Peso)
        CUP (Cuban Peso)
        CVE (Cape Verdean Escudo)
        CZK (Czech Republic Koruna)
        DJF (Djiboutian Franc)
        DKK (Danish Krone)
        DOP (Dominican Peso)
        DZD (Algerian Dinar)
        EGP (Egyptian Pound)
        ERN (Eritrean Nakfa)
        ETB (Ethiopian Birr)
        EUR (Euro)
        FJD (Fijian Dollar)
        FKP (Falkland Islands Pound)
        GBP (British Pound Sterling)
        GEL (Georgian Lari)
        GGP (Guernsey Pound)
        GHS (Ghanaian Cedi)
        GIP (Gibraltar Pound)
        GMD (Gambian Dalasi)
        GNF (Guinean Franc)
        GTQ (Guatemalan Quetzal)
        GYD (Guyanaese Dollar)
        HKD (Hong Kong Dollar)
        HNL (Honduran Lempira)
        HRK (Croatian Kuna)
        HTG (Haitian Gourde)
        HUF (Hungarian Forint)
        IDR (Indonesian Rupiah)
        ILS (Israeli New Sheqel)
        IMP (Manx pound)
        INR (Indian Rupee)
        IQD (Iraqi Dinar)
        IRR (Iranian Rial)
        ISK (Icelandic Króna)
        JEP (Jersey Pound)
        JMD (Jamaican Dollar)
        JOD (Jordanian Dinar)
        JPY (Japanese Yen)
        KES (Kenyan Shilling)
        KGS (Kyrgystani Som)
        KHR (Cambodian Riel)
        KMF (Comorian Franc)
        KPW (North Korean Won)
        KRW (South Korean Won)
        KWD (Kuwaiti Dinar)
        KYD (Cayman Islands Dollar)
        KZT (Kazakhstani Tenge)
        LAK (Laotian Kip)
        LBP (Lebanese Pound)
        LKR (Sri Lankan Rupee)
        LRD (Liberian Dollar)
        LSL (Lesotho Loti)
        LYD (Libyan Dinar)
        MAD (Moroccan Dirham)
        MDL (Moldovan Leu)
        MGA (Malagasy Ariary)
        MKD (Macedonian Denar)
        MMK (Myanma Kyat)
        MNT (Mongolian Tugrik)
        MOP (Macanese Pataca)
        MRO (Mauritanian Ouguiya (pre-2018))
        MRU (Mauritanian Ouguiya)
        MUR (Mauritian Rupee)
        MVR (Maldivian Rufiyaa)
        MWK (Malawian Kwacha)
        MXN (Mexican Peso)
        MYR (Malaysian Ringgit)
        MZN (Mozambican Metical)
        NAD (Namibian Dollar)
        NGN (Nigerian Naira)
        NIO (Nicaraguan Córdoba)
        NOK (Norwegian Krone)
        NPR (Nepalese Rupee)
        NZD (New Zealand Dollar)
        OMR (Omani Rial)
        PAB (Panamanian Balboa)
        PEN (Peruvian Nuevo Sol)
        PGK (Papua New Guinean Kina)
        PHP (Philippine Peso)
        PKR (Pakistani Rupee)
        PLN (Polish Zloty)
        PYG (Paraguayan Guarani)
        QAR (Qatari Rial)
        RON (Romanian Leu)
        RSD (Serbian Dinar)
        RUB (Russian Ruble)
        RWF (Rwandan Franc)
        SAR (Saudi Riyal)
        SBD (Solomon Islands Dollar)
        SCR (Seychellois Rupee)
        SDG (Sudanese Pound)
        SEK (Swedish Krona)
        SGD (Singapore Dollar)
        SHP (Saint Helena Pound)
        SLL (Sierra Leonean Leone)
        SOS (Somali Shilling)
        SRD (Surinamese Dollar)
        SSP (South Sudanese Pound)
        STD (São Tomé and Príncipe Dobra (pre-2018))
        STN (São Tomé and Príncipe Dobra)
        SVC (Salvadoran Colón)
        SYP (Syrian Pound)
        SZL (Swazi Lilangeni)
        THB (Thai Baht)
        TJS (Tajikistani Somoni)
        TMT (Turkmenistani Manat)
        TND (Tunisian Dinar)
        TOP (Tongan Paanga)
        TRY (Turkish Lira)
        TTD (Trinidad and Tobago Dollar)
        TWD (New Taiwan Dollar)
        TZS (Tanzanian Shilling)
        UAH (Ukrainian Hryvnia)
        UGX (Ugandan Shilling)
        USD (United States Dollar)
        UYU (Uruguayan Peso)
        UZS (Uzbekistan Som)
        VEF (Venezuelan Bolívar Fuerte (Old))
        VES (Venezuelan Bolívar Soberano)
        VND (Vietnamese Dong)
        VUV (Vanuatu Vatu)
        WST (Samoan Tala)
        XAF (CFA Franc BEAC)
        XAG (Silver Ounce)
        XAU (Gold Ounce)
        XCD (East Caribbean Dollar)
        XDR (Special Drawing Rights)
        XOF (CFA Franc BCEAO)
        XPD (Palladium Ounce)
        XPF (CFP Franc)
        XPT (Platinum Ounce)
        YER (Yemeni Rial)
        ZAR (South African Rand)
        ZMW (Zambian Kwacha)
        ZWL (Zimbabwean Dollar)
        ```
      tags:
        - Conversion
      security:
        - ApiKey: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                from:
                  type: string
                  example: USD
                to:
                  type: string
                  example: EUR
                amount:
                  type: number
                  format: float
                  example: 192.47
              required:
                - from
                - to
                - amount
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          rate:
                            type: number
                            format: float
                          date:
                            type: string
                            format: YYYY-MM-DD
                          result:
                            type: number
                            format: float
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /unit:
    post:
      summary: Random Number Generator
      operationId: unit
      description: |
        `Subscriber` Only Endpoint. API-Key is needed.

        Supported units are:

        **Length**
        ```
        mm, cm, m, in, ft-us, ft, mi
        ```

        **Area**
        ```
        mm2, cm2, m2, ha, km2, in2, ft2, ac, mi2
        ```

        **Mass**
        ```
        mcg, mg, g, kg, oz, lb, mt, t
        ```

        **Volume** 
        ```
        mm3, cm3, ml, l, kl, m3, km3, tsp, Tbs, in3, fl-oz, cup, pnt, qt, gal, ft3, yd3
        ```

        **Volume Flow Rate**
        ```
        mm3/s, cm3/s, ml/s, cl/s, dl/s, l/s, l/min, l/h, kl/s, kl/min, kl/h, m3/s, m3/min, m3/h, km3/s, tsp/s, Tbs/s, in3/s, in3/min, in3/h, fl-oz/s, fl-oz/min, fl-oz/h, cup/s, pnt/s, pnt/min, pnt/h, qt/s, gal/s, gal/min, gal/h, ft3/s, ft3/min, ft3/h, yd3/s, yd3/min, yd3/h
        ```

        **Temperature**
        ```
        C, F, K, R
        ```

        **Time**
        ```
        ns, mu, ms, s, min, h, d, week, month, year
        ```

        **Frequency**
        ```
        Hz, mHz, kHz, MHz, GHz, THz, rpm, deg/s, rad/s
        ```

        **Speed**
        ```
        m/s, km/h, m/h, knot, ft/s
        ```

        **Pace**
        ```
        s/m, min/km, s/ft, min/km
        ```

        **Pressure**
        ```
        Pa, hPa, kPa, MPa, bar, torr, psi, ksi
        ```

        **Digital**
        ```
        b, Kb, Mb, Gb, Tb, B, KB, MB, GB, TB
        ```

        **Illuminance**
        ```
        lx, ft-cd
        ```

        **Parts-Per**
        ```
        ppm, ppb, ppt, ppq
        ```

        **Voltage**
        ```
        V, mV, kV
        ```

        **Current**
        ```
        A, mA, kA
        ```

        **Power**
        ```
        W, mW, kW, MW, GW
        ```

        **Apparent Power**
        ```
        VA, mVA, kVA, MVA, GVA
        ```

        **Reactive Power**
        ```
        VAR, mVAR, kVAR, MVAR, GVAR
        ```

        **Energy**
        ```
        Wh, mWh, kWh, MWh, GWh, J, kJ
        ```

        **Reactive Energy**
        ```
        VARh, mVARh, kVARh, MVARh, GVARh
        ```

        **Angle**
        ```
        deg, rad, grad, arcmin, arcsec
        ```
      tags:
        - Conversion
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                from:
                  type: string
                  example: m/s
                to:
                  type: string
                  example: m/h
                amount:
                  type: number
                  format: float
                  example: 10.65
              required:
                - from
                - to
                - amount
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: integer
                        format: int32
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /epicgames/free:
    get:
      summary: Gets the current and next weeks free games
      operationId: getEpicGamesFree
      description: |
        `Subscriber` Only Endpoint. API-Key is needed.
      tags:
        - Games
      security:
        - ApiKey: []
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          currentWeek:
                            type: array
                            items:
                              type: object
                              properties:
                                title:
                                  type: string
                                description:
                                  type: string
                                type:
                                  type: string
                                startDate:
                                  type: string
                                  format: date-time
                                endDate:
                                  type: string
                                  format: date-time
                          nextWeek:
                            type: array
                            items:
                              type: object
                              properties:
                                title:
                                  type: string
                                description:
                                  type: string
                                type:
                                  type: string
                                startDate:
                                  type: string
                                  format: date-time
                                endDate:
                                  type: string
                                  format: date-time
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /address:
    get:
      summary: Provides address related mockup data
      operationId: getMockupAddress
      description: |
        Generates address mockup data with several information.
      tags:
        - Mockup
      parameters:
        - in: query
          name: locale
          description: |
            Supported locales:
            <table><thead><tr><th style="text-align:left;">Locale</th><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;">af_ZA</td><td style="text-align:left;">Afrikaans</td></tr><tr><td style="text-align:left;">ar</td><td style="text-align:left;">Arabic</td></tr><tr><td style="text-align:left;">az</td><td style="text-align:left;">Azerbaijani</td></tr><tr><td style="text-align:left;">cz</td><td style="text-align:left;">Czech</td></tr><tr><td style="text-align:left;">de</td><td style="text-align:left;">German</td></tr><tr><td style="text-align:left;">de_AT</td><td style="text-align:left;">German (Austria)</td></tr><tr><td style="text-align:left;">de_CH</td><td style="text-align:left;">German (Switzerland)</td></tr><tr><td style="text-align:left;">el</td><td style="text-align:left;">Greek</td></tr><tr><td style="text-align:left;">en</td><td style="text-align:left;">English</td></tr><tr><td style="text-align:left;">en_AU</td><td style="text-align:left;">English (Australia)</td></tr><tr><td style="text-align:left;">en_AU_ocker</td><td style="text-align:left;">English (Australia Ocker)</td></tr><tr><td style="text-align:left;">en_BORK</td><td style="text-align:left;">English (Bork)</td></tr><tr><td style="text-align:left;">en_CA</td><td style="text-align:left;">English (Canada)</td></tr><tr><td style="text-align:left;">en_GB</td><td style="text-align:left;">English (Great Britain)</td></tr><tr><td style="text-align:left;">en_GH</td><td style="text-align:left;">English (Ghana)</td></tr><tr><td style="text-align:left;">en_IE</td><td style="text-align:left;">English (Ireland)</td></tr><tr><td style="text-align:left;">en_IND</td><td style="text-align:left;">English (India)</td></tr><tr><td style="text-align:left;">en_NG</td><td style="text-align:left;">Nigeria (English)</td></tr><tr><td style="text-align:left;">en_US</td><td style="text-align:left;">English (United States)</td></tr><tr><td style="text-align:left;">en_ZA</td><td style="text-align:left;">English (South Africa)</td></tr><tr><td style="text-align:left;">es</td><td style="text-align:left;">Spanish</td></tr><tr><td style="text-align:left;">es_MX</td><td style="text-align:left;">Spanish (Mexico)</td></tr><tr><td style="text-align:left;">fa</td><td style="text-align:left;">Farsi</td></tr><tr><td style="text-align:left;">fi</td><td style="text-align:left;">Finnish</td></tr><tr><td style="text-align:left;">fr</td><td style="text-align:left;">French</td></tr><tr><td style="text-align:left;">fr_BE</td><td style="text-align:left;">Français (Belgique)</td></tr><tr><td style="text-align:left;">fr_CA</td><td style="text-align:left;">French (Canada)</td></tr><tr><td style="text-align:left;">fr_CH</td><td style="text-align:left;">French (Switzerland)</td></tr><tr><td style="text-align:left;">ge</td><td style="text-align:left;">Georgian</td></tr><tr><td style="text-align:left;">he</td><td style="text-align:left;">Hebrew</td></tr><tr><td style="text-align:left;">hr</td><td style="text-align:left;">Hrvatski</td></tr><tr><td style="text-align:left;">hu</td><td style="text-align:left;">Hungarian</td></tr><tr><td style="text-align:left;">hy</td><td style="text-align:left;">Armenian</td></tr><tr><td style="text-align:left;">id_ID</td><td style="text-align:left;">Indonesian</td></tr><tr><td style="text-align:left;">it</td><td style="text-align:left;">Italian</td></tr><tr><td style="text-align:left;">ja</td><td style="text-align:left;">Japanese</td></tr><tr><td style="text-align:left;">ko</td><td style="text-align:left;">Korean</td></tr><tr><td style="text-align:left;">lv</td><td style="text-align:left;">Latvian</td></tr><tr><td style="text-align:left;">mk</td><td style="text-align:left;">Macedonian</td></tr><tr><td style="text-align:left;">nb_NO</td><td style="text-align:left;">Norwegian</td></tr><tr><td style="text-align:left;">ne</td><td style="text-align:left;">Nepalese</td></tr><tr><td style="text-align:left;">nl</td><td style="text-align:left;">Dutch</td></tr><tr><td style="text-align:left;">nl_BE</td><td style="text-align:left;">Dutch (Belgium)</td></tr><tr><td style="text-align:left;">pl</td><td style="text-align:left;">Polish</td></tr><tr><td style="text-align:left;">pt_BR</td><td style="text-align:left;">Portuguese (Brazil)</td></tr><tr><td style="text-align:left;">pt_PT</td><td style="text-align:left;">Portuguese (Portugal)</td></tr><tr><td style="text-align:left;">ro</td><td style="text-align:left;">Romanian</td></tr><tr><td style="text-align:left;">ru</td><td style="text-align:left;">Russian</td></tr><tr><td style="text-align:left;">sk</td><td style="text-align:left;">Slovakian</td></tr><tr><td style="text-align:left;">sv</td><td style="text-align:left;">Swedish</td></tr><tr><td style="text-align:left;">tr</td><td style="text-align:left;">Turkish</td></tr><tr><td style="text-align:left;">uk</td><td style="text-align:left;">Ukrainian</td></tr><tr><td style="text-align:left;">ur</td><td style="text-align:left;">Urdu</td></tr><tr><td style="text-align:left;">vi</td><td style="text-align:left;">Vietnamese</td></tr><tr><td style="text-align:left;">zh_CN</td><td style="text-align:left;">Chinese</td></tr><tr><td style="text-align:left;">zh_TW</td><td style="text-align:left;">Chinese (Taiwan)</td></tr><tr><td style="text-align:left;">zu_ZA</td><td style="text-align:left;">Zulu (South Africa)</td></tr></tbody></table>
          required: false
          schema:
            type: string
        - in: query
          name: count
          description: |
            Set it to a value greater than `1` to receive an array of objects instead of a single object..

            Count is limited to your request method. 

            - Users can set it upto `10`
            - Members & Subscribers can set it upto `1000`
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          city:
                            type: string
                          country:
                            type: string
                          countryCode:
                            type: string
                          county:
                            type: string
                          state:
                            type: string
                          street:
                            type: string
                          zipCode:
                            type: string
                          timeZone:
                            type: string
                          latitude:
                            type: string
                          longitude:
                            type: string
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /company:
    get:
      summary: Provides company related mockup data
      operationId: getMockupCompany
      description: |
        Generates company mockup data with several information.
      tags:
        - Mockup
      parameters:
        - in: query
          name: count
          description: |
            Set it to a value greater than `1` to receive an array of objects instead of a single object..

            Count is limited to your request method. 

            - Users can set it upto `10`
            - Members & Subscribers can set it upto `1000`
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          name:
                            type: string
                          suffix:
                            type: string
                          catchPhrase:
                            type: string
                          bsPhrase:
                            type: string
                            description: business service phrase
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /finance:
    get:
      summary: Provides finance related mockup data
      operationId: getMockupFinance
      description: |
        Generates finance mockup data with several information.
      tags:
        - Mockup
      parameters:
        - in: query
          name: count
          description: |
            Set it to a value greater than `1` to receive an array of objects instead of a single object..

            Count is limited to your request method. 

            - Users can set it upto `10`
            - Members & Subscribers can set it upto `1000`
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          bank:
                            type: object
                            properties:
                              name:
                                type: string
                              number:
                                type: string
                              credit:
                                type: string
                              currency:
                                type: string
                              bic:
                                type: string
                              iban:
                                type: string
                              pin:
                                type: string
                          crypto:
                            type: object
                            properties:
                              bitcoinAddress:
                                type: string
                              ethereumAddress:
                                type: string
                              litecoinAddress:
                                type: string
                          creditCard:
                            type: object
                            properties:
                              issuer:
                                type: string
                              number:
                                type: string
                              cvv:
                                type: string
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /git:
    get:
      summary: Provides git related mockup data
      operationId: getMockupGit
      description: |
        Generates git data mockup with several information.
      tags:
        - Mockup
      parameters:
        - in: query
          name: count
          description: |
            Set it to a value greater than `1` to receive an array of objects instead of a single object..

            Count is limited to your request method. 

            - Users can set it upto `10`
            - Members & Subscribers can set it upto `1000`
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          branch:
                            type: string
                          commitEntry:
                            type: string
                          commitMessage:
                            type: string
                          commitShaLong:
                            type: string
                          commitShaShort:
                            type: string
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /internet:
    get:
      summary: Provides internet related mockup data
      operationId: getMockupInternet
      description: |
        Generates internet mockup data with several information.
      tags:
        - Mockup
      parameters:
        - in: query
          name: count
          description: |
            Set it to a value greater than `1` to receive an array of objects instead of a single object..

            Count is limited to your request method. 

            - Users can set it upto `10`
            - Members & Subscribers can set it upto `1000`
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          domain:
                            type: string
                          tld:
                            type: string
                          email:
                            type: string
                          emoji:
                            type: string
                          protocol:
                            type: string
                          url:
                            type: string
                          httpMethod:
                            type: string
                          httpStatusCode:
                            type: string
                          userAgent:
                            type: string
                          ipv4:
                            type: string
                          ipv6:
                            type: string
                          mac:
                            type: string
                          port:
                            type: string
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /product:
    get:
      summary: Provides product related mockup data
      operationId: getMockupProduct
      description: |
        Generates product mockup data with several information.
      tags:
        - Mockup
      parameters:
        - in: query
          name: count
          description: |
            Set it to a value greater than `1` to receive an array of objects instead of a single object..

            Count is limited to your request method. 

            - Users can set it upto `10`
            - Members & Subscribers can set it upto `1000`
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          product:
                            type: string
                          name:
                            type: string
                          description:
                            type: string
                          material:
                            type: string
                          color:
                            type: string
                          department:
                            type: string
                          price:
                            type: string
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /user:
    get:
      summary: Provides user related mockup data
      operationId: getMockupUser
      description: |
        Generates user mockup data with several information.
      tags:
        - Mockup
      parameters:
        - in: query
          name: locale
          description: |
            Supported locales:
            <table><thead><tr><th style="text-align:left;">Locale</th><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;">af_ZA</td><td style="text-align:left;">Afrikaans</td></tr><tr><td style="text-align:left;">ar</td><td style="text-align:left;">Arabic</td></tr><tr><td style="text-align:left;">az</td><td style="text-align:left;">Azerbaijani</td></tr><tr><td style="text-align:left;">cz</td><td style="text-align:left;">Czech</td></tr><tr><td style="text-align:left;">de</td><td style="text-align:left;">German</td></tr><tr><td style="text-align:left;">de_AT</td><td style="text-align:left;">German (Austria)</td></tr><tr><td style="text-align:left;">de_CH</td><td style="text-align:left;">German (Switzerland)</td></tr><tr><td style="text-align:left;">el</td><td style="text-align:left;">Greek</td></tr><tr><td style="text-align:left;">en</td><td style="text-align:left;">English</td></tr><tr><td style="text-align:left;">en_AU</td><td style="text-align:left;">English (Australia)</td></tr><tr><td style="text-align:left;">en_AU_ocker</td><td style="text-align:left;">English (Australia Ocker)</td></tr><tr><td style="text-align:left;">en_BORK</td><td style="text-align:left;">English (Bork)</td></tr><tr><td style="text-align:left;">en_CA</td><td style="text-align:left;">English (Canada)</td></tr><tr><td style="text-align:left;">en_GB</td><td style="text-align:left;">English (Great Britain)</td></tr><tr><td style="text-align:left;">en_GH</td><td style="text-align:left;">English (Ghana)</td></tr><tr><td style="text-align:left;">en_IE</td><td style="text-align:left;">English (Ireland)</td></tr><tr><td style="text-align:left;">en_IND</td><td style="text-align:left;">English (India)</td></tr><tr><td style="text-align:left;">en_NG</td><td style="text-align:left;">Nigeria (English)</td></tr><tr><td style="text-align:left;">en_US</td><td style="text-align:left;">English (United States)</td></tr><tr><td style="text-align:left;">en_ZA</td><td style="text-align:left;">English (South Africa)</td></tr><tr><td style="text-align:left;">es</td><td style="text-align:left;">Spanish</td></tr><tr><td style="text-align:left;">es_MX</td><td style="text-align:left;">Spanish (Mexico)</td></tr><tr><td style="text-align:left;">fa</td><td style="text-align:left;">Farsi</td></tr><tr><td style="text-align:left;">fi</td><td style="text-align:left;">Finnish</td></tr><tr><td style="text-align:left;">fr</td><td style="text-align:left;">French</td></tr><tr><td style="text-align:left;">fr_BE</td><td style="text-align:left;">Français (Belgique)</td></tr><tr><td style="text-align:left;">fr_CA</td><td style="text-align:left;">French (Canada)</td></tr><tr><td style="text-align:left;">fr_CH</td><td style="text-align:left;">French (Switzerland)</td></tr><tr><td style="text-align:left;">ge</td><td style="text-align:left;">Georgian</td></tr><tr><td style="text-align:left;">he</td><td style="text-align:left;">Hebrew</td></tr><tr><td style="text-align:left;">hr</td><td style="text-align:left;">Hrvatski</td></tr><tr><td style="text-align:left;">hu</td><td style="text-align:left;">Hungarian</td></tr><tr><td style="text-align:left;">hy</td><td style="text-align:left;">Armenian</td></tr><tr><td style="text-align:left;">id_ID</td><td style="text-align:left;">Indonesian</td></tr><tr><td style="text-align:left;">it</td><td style="text-align:left;">Italian</td></tr><tr><td style="text-align:left;">ja</td><td style="text-align:left;">Japanese</td></tr><tr><td style="text-align:left;">ko</td><td style="text-align:left;">Korean</td></tr><tr><td style="text-align:left;">lv</td><td style="text-align:left;">Latvian</td></tr><tr><td style="text-align:left;">mk</td><td style="text-align:left;">Macedonian</td></tr><tr><td style="text-align:left;">nb_NO</td><td style="text-align:left;">Norwegian</td></tr><tr><td style="text-align:left;">ne</td><td style="text-align:left;">Nepalese</td></tr><tr><td style="text-align:left;">nl</td><td style="text-align:left;">Dutch</td></tr><tr><td style="text-align:left;">nl_BE</td><td style="text-align:left;">Dutch (Belgium)</td></tr><tr><td style="text-align:left;">pl</td><td style="text-align:left;">Polish</td></tr><tr><td style="text-align:left;">pt_BR</td><td style="text-align:left;">Portuguese (Brazil)</td></tr><tr><td style="text-align:left;">pt_PT</td><td style="text-align:left;">Portuguese (Portugal)</td></tr><tr><td style="text-align:left;">ro</td><td style="text-align:left;">Romanian</td></tr><tr><td style="text-align:left;">ru</td><td style="text-align:left;">Russian</td></tr><tr><td style="text-align:left;">sk</td><td style="text-align:left;">Slovakian</td></tr><tr><td style="text-align:left;">sv</td><td style="text-align:left;">Swedish</td></tr><tr><td style="text-align:left;">tr</td><td style="text-align:left;">Turkish</td></tr><tr><td style="text-align:left;">uk</td><td style="text-align:left;">Ukrainian</td></tr><tr><td style="text-align:left;">ur</td><td style="text-align:left;">Urdu</td></tr><tr><td style="text-align:left;">vi</td><td style="text-align:left;">Vietnamese</td></tr><tr><td style="text-align:left;">zh_CN</td><td style="text-align:left;">Chinese</td></tr><tr><td style="text-align:left;">zh_TW</td><td style="text-align:left;">Chinese (Taiwan)</td></tr><tr><td style="text-align:left;">zu_ZA</td><td style="text-align:left;">Zulu (South Africa)</td></tr></tbody></table>
          required: false
          schema:
            type: string
        - in: query
          name: sex
          description: |
            Set `sex` to `male` or `female` to receive sex-specific users
          required: false
          schema:
            type: string
        - in: query
          name: count
          description: |
            Set it to a value greater than `1` to receive an array of objects instead of a single object..

            Count is limited to your request method. 

            - Users can set it upto `10`
            - Members & Subscribers can set it upto `1000`
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: address
          description: |
            Set it to a true to receive also address data.
          required: false
          schema:
            type: boolean
        - in: query
          name: finance
          description: |
            Set it to a true to receive also finance data.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                          prefix:
                            type: string
                          suffix:
                            type: string
                          firstName:
                            type: string
                          lastName:
                            type: string
                          fullName:
                            type: string
                          username:
                            type: string
                          sex:
                            type: string
                          gender:
                            type: string
                          avatar:
                            type: string
                            format: url
                          birthday:
                            type: string
                          email:
                            type: object
                            properties:
                              address:
                                type: string
                              password:
                                type: string
                          phone:
                            type: object
                            properties:
                              number:
                                type: string
                              imei:
                                type: string
                          subscription:
                            type: string
                          address:
                            type: object
                            properties:
                              city:
                                type: string
                              country:
                                type: string
                              countryCode:
                                type: string
                              county:
                                type: string
                              state:
                                type: string
                              street:
                                type: string
                              zipCode:
                                type: string
                              timeZone:
                                type: string
                              latitude:
                                type: string
                              longitude:
                                type: string
                          finance:
                            type: object
                            properties:
                              bank:
                                type: object
                                properties:
                                  name:
                                    type: string
                                  number:
                                    type: string
                                  credit:
                                    type: string
                                  currency:
                                    type: string
                                  bic:
                                    type: string
                                  iban:
                                    type: string
                                  pin:
                                    type: string
                              crypto:
                                type: object
                                properties:
                                  bitcoinAddress:
                                    type: string
                                  ethereumAddress:
                                    type: string
                                  litecoinAddress:
                                    type: string
                              creditCard:
                                type: object
                                properties:
                                  issuer:
                                    type: string
                                  number:
                                    type: string
                                  cvv:
                                    type: string
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /vehicle:
    get:
      summary: Provides vehicle related mockup data
      operationId: getMockupVehicle
      description: |
        Generates vehicle mockup data with several information.
      tags:
        - Mockup
      parameters:
        - in: query
          name: count
          description: |
            Set it to a value greater than `1` to receive an array of objects instead of a single object..

            Count is limited to your request method. 

            - Users can set it upto `10`
            - Members & Subscribers can set it upto `1000`
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          manufacturer:
                            type: string
                          vehicle:
                            type: string
                          type:
                            type: string
                          model:
                            type: string
                          fuel:
                            type: string
                          color:
                            type: string
                          vin:
                            type: string
                            description: Vehicle Identification Number
                          vrm:
                            type: string
                            description: Vehicle Registration Mark
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /moviefinder:
    post:
      summary: Finds a movie or show in a country
      operationId: moviefinder
      description: |
        `Public`, `Member` & `Subscriber` Endpoint. API-Key not necessary.

        This endpoint offers 5 movie / show suggestions that most closely match the entered title.

        Supported types: `movie` and `show`

        Supported locales:
        ```
        sq_AL (Albania)
        ar_DZ (Algeria)
        ca_AD (Andorra)
        pt_AO (Angola)
        en_AG (Antigua and Barbuda)
        es_AR (Argentina)
        en_AU (Australia)
        de_AT (Austria)
        az_AZ (Azerbaijan)
        en_BS (Bahamas)
        ar_BH (Bahrain)
        en_BB (Barbados)
        be_BY (Belarus)
        fr_BE (Belgium)
        en_BZ (Belize)
        en_BM (Bermuda)
        es_BO (Bolivia)
        bs_BA (Bosnia and Herzegovina)
        pt_BR (Brazil)
        bg_BG (Bulgaria)
        fr_BF (Burkina Faso)
        en_CM (Cameroon)
        en_CA (Canada)
        pt_CV (Cape Verde)
        ar_TD (Chad)
        es_CL (Chile)
        es_CO (Colombia)
        es_CR (Costa Rica)
        hr_HR (Croatia)
        es_CU (Cuba)
        el_CY (Cyprus)
        cs_CZ (Czech Republic)
        en_DK (Denmark)
        es_DO (Dominican Republic)
        fr_CD (DR Congo)
        es_EC (Ecuador)
        ar_EG (Egypt)
        es_SV (El Salvador)
        es_GQ (Equatorial Guinea)
        et_EE (Estonia)
        en_FJ (Fiji)
        fi_FI (Finland)
        fr_FR (France)
        fr_GF (French Guiana)
        fr_PF (French Polynesia)
        de_DE (Germany)
        en_GH (Ghana)
        en_GI (Gibraltar)
        el_GR (Greece)
        es_GT (Guatemala)
        en_GG (Guernsey)
        en_GY (Guyana)
        es_HN (Honduras)
        zh_HK (Hong Kong)
        hu_HU (Hungary)
        is_IS (Iceland)
        en_IN (India)
        en_ID (Indonesia)
        ar_IQ (Iraq)
        en_IE (Ireland)
        he_IL (Israel)
        it_IT (Italy)
        fr_CI (Ivory Coast)
        en_JM (Jamaica)
        ja_JP (Japan)
        ar_JO (Jordan)
        en_KE (Kenya)
        sq_XK (Kosovo)
        ar_KW (Kuwait)
        lv_LV (Latvia)
        ar_LB (Lebanon)
        ar_LY (Libya)
        de_LI (Liechtenstein)
        lt_LT (Lithuania)
        fr_LU (Luxembourg)
        mk_MK (Macedonia)
        fr_MG (Madagascar)
        en_MW (Malawi)
        en_MY (Malaysia)
        fr_ML (Mali)
        mt_MT (Malta)
        fr_MU (Mauritius)
        es_MX (Mexico)
        ro_MD (Moldova)
        fr_MC (Monaco)
        sr_ME (Montenegro)
        ar_MA (Morocco)
        pt_MZ (Mozambique)
        en_NL (Netherlands)
        en_NZ (New Zealand)
        es_NI (Nicaragua)
        fr_NE (Niger)
        en_NG (Nigeria)
        en_NO (Norway)
        ar_OM (Oman)
        ur_PK (Pakistan)
        ar_PS (Palestine)
        es_PA (Panama)
        en_PG (Papua New Guinea)
        es_PY (Paraguay)
        es_PE (Peru)
        en_PH (Philippines)
        pl_PL (Poland)
        pt_PT (Portugal)
        ar_QA (Qatar)
        ro_RO (Romania)
        ru_RU (Russia)
        en_LC (Saint Lucia)
        it_SM (San Marino)
        ar_SA (Saudi Arabia)
        fr_SN (Senegal)
        sr_RS (Serbia)
        fr_SC (Seychelles)
        en_SG (Singapore)
        sk_SK (Slovakia)
        sl_SI (Slovenia)
        en_ZA (South Africa)
        ko_KR (South Korea)
        es_ES (Spain)
        sv_SE (Sweden)
        de_CH (Switzerland)
        zh_TW (Taiwan)
        sw_TZ (Tanzania)
        en_TH (Thailand)
        en_TT (Trinidad and Tobago)
        ar_TN (Tunisia)
        tr_TR (Turkey)
        en_TC (Turks and Caicos Islands)
        en_UG (Uganda)
        uk_UA (Ukraine)
        ar_AE (United Arab Emirates)
        en_GB (United Kingdom)
        en_US (United States)
        es_UY (Uruguay)
        it_VA (Vatican City)
        es_VE (Venezuela)
        ar_YE (Yemen)
        en_ZM (Zambia)
        en_ZW (Zimbabwe)
        ```

        Supported streaming providers:
        ``` 
        7plus, 9Now, A Spor, A&E, ABC, ABC iview, Acontra Plus, Acontra Plus Amazon Channel, Acorn TV, AcornTV Amazon Channel, Action Max Amazon Channel, Adult Swim, aha, AHCTV, Alamo on Demand, All 4, Alleskino, Alt Balaji, Amazon Arthaus Channel, Amazon DVD / Blu-ray, Amazon Prime Video, Amazon Video, AMC, AMC on Demand, AMC Plus Apple TV Channel , AMC Theatres, AMC+, AMC+ Amazon Channel, AMC+ Roku Premium Channel, Amediateka, Animal Planet, Animax Plus Amazon Channel, Anime Digital Networks, Aniverse Amazon Channel, Apple TV, Apple TV Plus, Argo, ARROW, Arrow Video Amazon Channel, Arte, Arthouse CNMA Amazon Channel, ArthouseCNMA, AsianCrush, Atres Player, AVA BGB, AVA CSAL, AVA HBZ, AVA VOBB, Azteca 7, Band Sports, BBC America, BBC Earth Amazon Channel, BBC iPlayer, BBC Player Amazon Channel, Bbox VOD, Be TV Go, Beamafilm, Behind the Tree, beIN SPORTS, Belas Artes à La Carte, Believe, Benshi Amazon Channel, Bet+, Bet+ Amazon Channel, BFI Player, BFI Player Amazon Channel, BINGE, Bioskop Online, Blim, Blockbuster, Bloody Movies Amazon Channel, blue TV, blutv, BluTV Amazon Channel, Boomerang, Boomerang Amazon Channel, BoxOffice, Bravo TV, BritBox, BritBox Amazon Channel, Britbox Apple TV Channel , British Pathé TV, BroadwayHD, BT Sport, BTV, C More, Canal VOD, Canal+, Canal+ Sport, Cartoon Network, Catchplay, CBC Gem, CBS, CG Collection Amazon channel, Chai Flicks, Chili, CINE, Cine Comico Amazon Channel, Cineasterna, Cinema of Hearts Amazon Channel, Cinemas a la Demande, Cinemax Amazon Channel, CineMember, Cineplex, Cinépolis KLIC, Claro video, Classix, Club Illico, Cohen Media Amazon Channel, Comedy Central, Comedy Central Plus Amazon Channel, CONTAR, CONtv, Cooking Channel, Courtside 1891, Crackle, Crave, Crave Starz, Criterion Channel, Crunchyroll, CTV, Cultpix, Curiosity Stream, CuriosityStream Amazon Channel, Curzon Amazon Channel, Curzon Home Cinema, CW Seed, Dansk Filmskat, Darkmatter TV, Das Erste Mediathek, Daum, DAZN, DAZN Amazon Channel, Dekkoo, Destination America, DIRECTV, DIRECTV GO, Discovery, Discovery Amazon Channel, Discovery Life, Discovery Plus, Discovery Plus Amazon Channel, Discovery Plus Sport Amazon Channel, Disney Plus, DisneyNOW, DIY Network, Dizi Amazon Channel, DocAlliance Films, DocPlay, DOCSVILLE, DocuBay Amazon Channel, Dogwoof On Demand, Dove Channel, Draken Films, DreamWorksTV Amazon Channel, DRTV, dTV, Edisonline, ELEVEN , Elisa Viihde, EPIC ON, Eros Now, Eros Now Amazon Channel, ESPN, ESPN 2, ESPN 3, ESPN 4, ESPN Deportes, ESPN Player, ESPN Plus, Eurosport, Eventive, Exxen, F1TV Pro, Fandor, Fandor Amazon Channel, Fetch TV, FFF tv, Film Movement Plus, Film Total Amazon Channel, Film1, FilmBox Live Amazon Channel, FilmBox+, Filme Filme, filmfriend, Filmin, Filmin Latino, Filmin Plus, filmingo, Filmlegenden Amazon Channel, FILMO, Filmo Amazon Channel, Filmoteket, Filmow, FILMRISE, Filmstriben, Filmtastic, Filmtastic Amazon Channel, Filmzie, Flimmit, Flix Premiere, FlixFling, FlixOlé, FlixOlé Amazon Channel, Flo Rugby, Food Network, Fox, FOX Soccer Plus, Fox Sports, Fox Sports 1, Foxtel Now, France TV, Free - All, Freeform, Freevee, fuboTV, Full Action Amazon Channel, Full Moon Amazon Channel, Funimation Now, FXNow, FXNow Canada, Gameflow TV, genflix, Global TV, Globoplay, Go3, Gol Mundial, Google Play Movies, GOSPEL PLAY, GRJNGO Amazon Channel, GuideDoc, Hallmark Movies, Hallmark Movies Now Amazon Channel, Hallmark TV Amazon Channel, Hayu, Hayu Amazon Channel, HBO Go, HBO Max, HBO Max Amazon Channel, HBO Max Free, Here TV, HGTV, Hi-YAH, HiDive, Historia y Actualidad Amazon Channel, History, History Play, History Vault, HistoryPlay Amazon Channel, Hoichoi, Hollywood Suite, Hollywood Suite Amazon Channel, Home of Horror, Home of Horror Amazon Channel, Hoopla, Hopster TV, Horizon, Horrify, Hotstar, HRTi, Hulu, Hungama Play, iBAKATV, iciTouTV, Icon Film Amazon Channel, IFC Amazon Channel, IFFR Unleashed, iflix, INA madelen Amazon Channel, IndieFlix, Infinity Selection Amazon Channel, Infinity+, Insomnia Amazon Channel, inSports TV, Investigation Discovery, IPLA, iQIYI, IROKOTV, ITV Amazon Channel, ITVX, Ivi, iWantTFC, iWonder Full Amazon channel, izzi, Jio Cinema, Joyn, Joyn Plus, Kanopy, Kino Now, Kino on Demand, Kinopoisk, KinoPop, Kirjastokino, Kividoo, KKTV, Klassiki, Klik Film, Knowledge Network, Kocowa, KoreaOnDemand, KPN, L Equipe, LaCinetek, Las Estrellas, Laugh Out Loud, Libreflix, Lifetime, Lifetime Movie Club, Ligue 1 Amazon Channel, LINE TV, Lionsgate Play, Lionsgate Plus, Logo TV, Looke, Looke Amazon Channel, Love and Passion Amazon Channel, Love Nature Amazon Channel, Magellan TV, Magenta TV, MagentaTV, Magnolia Selects, ManoramaMax, MARCA Claro, Martha Stewart TV, MAX Stream, Maxdome, maxdome Store, Mediaset Infinity, Megabox, meJane, Meo, Metrograph, MGM Amazon Channel, MGM Plus, MGM Plus Amazon Channel, MGM Plus Roku Premium Channel, Mhz Choice, Microsoft Store, Mitele , MLB Network, MLB TV, MLB.TV Amazon Channel, MLS Season Pass, MOLA TV, More Than Sports TV, More TV, Motor Trend, MotorTrend Amazon Channel, Moviedome Plus Amazon Channel, MovieSaints, Movietickets, Movistar Play, Movistar Plus, MTV, MTV Plus Amazon Channel, MUBI, MUBI Amazon Channel, MX Player, My5, MyOutdoorTV, MZ Choice Amazon Channel, Naver Store, NBA League Pass, NBA League Pass Amazon Channel, NBA TV Amazon Channel, NBC, Neon TV, Netflix, Netflix basic with Ads, Netflix Kids, NetMovies, Netzkino, Nexo Plus, NFB, NFL Game Pass, NFL Plus, NHL Network, NHL TV, Night Flight Plus, NLZIET, Noggin Amazon Channel, Noovo, Nova Play, NOW, Now TV, Now TV Cinema, NPO 1, NPO 2, NPO Start, NPO Zapp, NRK TV, O2 TV, OCS Amazon Channel , OCS Go, Oi Play, Okko, Oldflix, OneFootball, Orange VOD, OSN, Otta, OUTtv Amazon Channel, OVID, OXYGEN, OzFlix, Pantaflix, Pantaya, Pantaya Amazon Channel, Paramount Network, Paramount Plus, Paramount Plus Apple TV Channel , Paramount+ Amazon Channel, Paramount+ Roku Premium Channel, Paramount+ Showtime, Pash Amazon Channel, Pass Warner Amazon Channel, Pathé Thuis, Paus, PBS, PBS Kids Amazon Channel, PBS Masterpiece Amazon Channel, Peacock, Peacock Premium, Pickbox NOW, Pickx Sports, Picl, Planet Horror Amazon Channel, Play Sports, Play Suisse, Player, Plex, Pluto TV, Pokémon Amazon Channel, Pongalo Amazon Channel , Popcorn, Popcornflix, Popcorntimes, Popflick, Premier, Premier Sports, PRTV, Public Domain Movies, puhutv, Pure Flix, QFT Player, QubitTV, Rai News, Rai Play, Rai Sport, Rakuten TV, Rakuten Viki, Rambler, Ran, RDS, realeyz, Realeyz Amazon Channel, Redbox, Retrocrush, Revry, RMC Sport, Rooster Teeth, RTBF, RTL Passion Amazon Channel, RTL Play, RTL+, RTPplay, rtve, Runtime, Ruutu, S Sport Plus, Sat 1, SBS On Demand, SBT Sports, Science Channel, Screambox, Screambox Amazon Channel, Serially, SF Anytime, SFR Play, Shadowz, Shadowz Amazon Channel, Shahid VIP, ShemarooMe, ShortsTV Amazon Channel, Shout! Factory Amazon Channel, Shout! Factory TV, ShowMax, Showtime, Showtime Amazon Channel, Showtime Apple TV Channel, Showtime Roku Premium Channel, Shudder, Shudder Amazon Channel, Silverline Amazon Channel, Sixplay, Sky, Sky Go, Sky Sports, Sky Store, Sky X, SkyShowtime, Sling TV Blue, Sling TV Orange, Sling TV Orange and Blue, Sling TV Sports Extra, Smithsonian Channel, Smithsonian Channel Amazon Channel, SN Now, Sony AXN Amazon Channel, Sony Liv, Sooner, South Park, Spamflix, Spectrum On Demand, Sport TV, Sport1, Sport1+, Sportall, Sportdigital, Sportitalia, Sportschau, Spuul, StackTV Amazon Channel, Stan, Star Plus, Starz, Starz Amazon Channel, Starz Apple TV Channel, Starz Play Amazon Channel, Starz Roku Premium Channel, STARZPLAY, Strim, Studiocanal Presents ALLSTARS Amazon Channel, Studiocanal Presents Amazon Channel, STUDIOCANAL PRESENTS Apple TV Channel, Studiocanal Presents MOVIECULT Amazon Channel, STV Player, Sun Nxt, Sundance Now, Sundance Now Amazon Channel, Super Channel Amazon Channel, Superfresh Amazon Channel, SuperTennis, SVT, Syfy, Takflix, Talk Talk TV, Tata Play, TBS, TCM, Tele2 Play, Telenet, TELETOON+ Amazon Channel, Telia Play, Telstra TV, Tenk, Tennis Channel, Tennis TV, tenplay, TF1, The CW, The FA Player, The Film Detective, The Great Courses Signature Collection Amazon Channel, The Oprah Winfrey Network, The Roku Channel, ThreeNow, Timvision, Tivibu, Tivify, TLC, tln, TNT, TNT Sports Go, TNTGo, TOD, TOD TV, Topic, Travel Channel, TriArt Play, TRT SPOR, TRT1, tru TV, True Story, TSN, TSN Plus, TSN1, TSN2, TSN3, TSN4, TSN5, Tubi TV, Tubi TV Sports, TUDN, Turk On Video Amazon Channel, TV 2, TV 2 Play, TV Land, TV8, TVCortos Amazon Channel, TVF Play, TvIgle, TVNZ, tvo, TVPublica, tvzavr, Twitch, TyC Sports, U-NEXT, UAM TV, UCIcinemas, UKTV Play, UMC Amazon Channel, Univer Video, Universal Pictures, Universcine, Universcine Amazon Channel, UPC TV, Urban Movie Channel, URC TV, USA Network, VH1, VI movies and tv, Viaplay, Viaplay Sports, Vice TV , Viddla, Videobuster, Videoland, Vidio, Viewster Amazon Channel, Viu, VIX , Vix+ Amazon Channel, VOD Club, VOD Poland, Volta, Voot, Voyo, VRT MAX, VRV, Vudu, VUDU Free, VVVVID, W4free, W9, WAKANIM, Watcha, Watchbox, wavve, wedotv, WeTV, WOW, WOW Presents Plus, WTA TV, WWE Network, YeloTV, Yle Areena, Yorck on Demand, YouTube, YouTube Free, YouTube Premium, YouTube Sports, Yupp TV, ZDF, ZDF Herzkino Amazon Channel, Zee5, Ziggo TV
        ```
      tags:
        - MovieFinder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                locale:
                  type: string
                  example: en_US
                type:
                  type: string
                  description: movie or show
                  example: movie
                title:
                  type: string
                  description: Title of the movie or show
                  example: The Matrix
              required:
                - locale
                - type
                - title
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            locale:
                              type: string
                            country:
                              type: string
                            title:
                              type: string
                            release_year:
                              type: integer
                              format: int32
                            poster:
                              type: string
                              format: base64
                              description: Cover image as base64
                            offers:
                              type: object
                              properties:
                                buy:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      name:
                                        type: string
                                        description: Name of the streaming provider
                                      url:
                                        type: string
                                        description: Direct link to the movie/show
                                      retail_price:
                                        type: number
                                        format: float
                                        description: Price of the movie/show
                                      currency:
                                        type: string
                                        description: Currency based on the locale
                                      seasons:
                                        type: integer
                                        format: int32
                                        description: 'Season count, 0 if its a movie'
                                      icon:
                                        type: string
                                        format: base64
                                        description: Icon of the streaming provider in base64
                                rent:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      name:
                                        type: string
                                        description: Name of the streaming provider
                                      url:
                                        type: string
                                        description: Direct link to the movie/show
                                      retail_price:
                                        type: number
                                        format: float
                                        description: Price of the movie/show
                                      currency:
                                        type: string
                                        description: Currency based on the locale
                                      seasons:
                                        type: integer
                                        format: int32
                                        description: 'Season count, 0 if its a movie'
                                      icon:
                                        type: string
                                        format: base64
                                        description: Icon of the streaming provider in base64
                                ads:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      name:
                                        type: string
                                        description: Name of the streaming provider
                                      url:
                                        type: string
                                        description: Direct link to the movie/show
                                      retail_price:
                                        type: number
                                        format: float
                                        description: Price of the movie/show
                                      currency:
                                        type: string
                                        description: Currency based on the locale
                                      seasons:
                                        type: integer
                                        format: int32
                                        description: 'Season count, 0 if its a movie'
                                      icon:
                                        type: string
                                        format: base64
                                        description: Icon of the streaming provider in base64
                                flatrate:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      name:
                                        type: string
                                        description: Name of the streaming provider
                                      url:
                                        type: string
                                        description: Direct link to the movie/show
                                      retail_price:
                                        type: number
                                        format: float
                                        description: Price of the movie/show
                                      currency:
                                        type: string
                                        description: Currency based on the locale
                                      seasons:
                                        type: integer
                                        format: int32
                                        description: 'Season count, 0 if its a movie'
                                      icon:
                                        type: string
                                        format: base64
                                        description: Icon of the streaming provider in base64
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /moviefinder/locales:
    get:
      summary: Gets all supported locales
      operationId: getAllMovieFinderLocales
      description: |
        `Public`, `Member` & `Subscriber` Endpoint. API-Key not necessary.

        This is an endpoint to retrieve all supported locales. 
      tags:
        - MovieFinder
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          locale:
                            type: string
                          country:
                            type: string
                          currency:
                            type: string
                          currency_name:
                            type: string
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /moviefinder/providers:
    get:
      summary: Gets all supported streaming providers
      operationId: getAllMovieFinderProviders
      description: |
        `Public`, `Member` & `Subscriber` Endpoint. API-Key not necessary.

        This is an endpoint to retrieve all supported streaming providers. 

        You can filter them by passing the `locale` query parameter.
      tags:
        - MovieFinder
      parameters:
        - in: query
          name: locale
          description: |
            Must be a valid and supported locale.
          required: false
          schema:
            type: string
            example: de_DE
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          short_name:
                            type: string
                            description: Short name (code) of the provider
                          name:
                            type: string
                            description: Providers full name
                          monetization_types:
                            type: string
                            description: |
                              Comma sperated values like: buy, rent, ads, flaterate
                          locale:
                            type: string
                            description: locale of the provider
                          icon:
                            type: string
                            format: base64
                            description: Icon/Image of the provider as base64
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /dnslookup:
    get:
      summary: Provides dns information about given FQDN
      operationId: getDnsLookup
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.

        Provides DNS (Domain Name Service) information about the given FQDN (Full Qualified Domain Name).
        IPv4 (if available) and IPv6 (if available) along with their DNS Records.
      tags:
        - Net Tools
      security:
        - ApiKey: []
      parameters:
        - in: query
          name: source
          description: |
            Must be a valid FQDN (without protocol). Do not provide IPv4 or IPv6 address.
          required: true
          schema:
            type: string
            example: wild-devs.net
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          ipv4:
                            type: string
                            format: $ipv4
                          ipv6:
                            type: string
                            format: $ipv6
                          records:
                            type: array
                            items:
                              type: object
                              properties:
                                type:
                                  type: string
                                ttl:
                                  type: string
                                class:
                                  type: string
                                value:
                                  oneOf:
                                    - type: string
                                    - type: object
                                      properties:
                                        priority:
                                          type: string
                                        server:
                                          type: string
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /ipinfo:
    get:
      summary: Provides comprehensive IP information
      operationId: getIpInfo
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.

        Provides a huge amount of IP information, from ISP to location data.
      tags:
        - Net Tools
      security:
        - ApiKey: []
      parameters:
        - in: query
          name: source
          description: |
            Must be a valid IPv4 or IPv6 address. Do not provide FQDN.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          ip:
                            type: string
                          range:
                            type: string
                          source:
                            type: string
                          org:
                            type: string
                          netname:
                            type: string
                          isp:
                            type: string
                          description:
                            type: string
                          country:
                            type: string
                          status:
                            type: string
                          mnt-by:
                            type: array
                            items:
                              type: string
                          mnt-ref:
                            type: array
                            items:
                              type: string
                          nic-hdl:
                            type: array
                            items:
                              type: string
                          admin-c:
                            type: string
                          tech-c:
                            type: string
                          abuse-c:
                            type: string
                          person:
                            type: array
                            items:
                              type: string
                          address:
                            type: array
                            items:
                              type: string
                          phone:
                            type: string
                          location:
                            type: object
                            properties:
                              continent:
                                type: string
                              country:
                                type: string
                              city:
                                type: string
                              postal:
                                type: string
                              latitude:
                                type: string
                              longitude:
                                type: string
                          createdAt:
                            type: string
                          lastModifiedAt:
                            type: string
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /whatsmyip:
    get:
      summary: Provides IP address and ISP information about the issuer
      operationId: getWhatsMyIp
      description: |
        IPv4 or IPv6 along with the ISP (Internet Service Provider) and country code.
      tags:
        - Net Tools
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          ip:
                            type: string
                            format: $ip
                            description: IPv4 or IPv6 address
                          isp:
                            type: string
                            description: Internet Service Provider
                          country:
                            type: string
                            description: Country code
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /domains:
    get:
      summary: Provides a list of official top level domains
      operationId: domains
      description: |
        `Public`, `Member` & `Subscriber` Endpoint. API-Key not necessary.

        A list of all valid top-level domains is maintained by the IANA and is updated from time to time.

        Source: <a href='https://www.icann.org/resources/pages/tlds-2012-02-25-en'>ICANN</a>

        Last update: 2012-02-25
      tags:
        - Open Data
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            domain:
                              type: string
                              description: Top Level Domain
                              example: .de
                            type:
                              type: string
                              description: country-code or generic
                              example: country-code
                            manager:
                              type: string
                              description: Registrar
                              example: DENIC eG
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /joke:
    get:
      summary: Random Joke Delivery
      operationId: joke
      description: |
        `Public`, `Member` & `Subscriber` Endpoint. API-Key not necessary.`Public`, `Member` & `Subscriber` Endpoint. API-Key not necessary.

        Delivers a random joke from a pool of ~5000. 

        <h3>Disclaimer</h3>
        <div style="border: 1px dashed red; padding: 10px; background-color: #f0f0f0;">
          It has been attempted to keep the jokes as clean as possible. Since the data has been collected by scraping websites, it is possible that there may be a few jokes that are inappropriate or offensive to some people.
        </div>
      tags:
        - Random
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: string
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /string:
    post:
      summary: Random String Generator
      operationId: string
      description: |
        Generate random strings for passwords, product keys, vouchers or uuids as identifiers.

        Allowed methods: string, bytes, base32, base62, uuidv4, uuidv5

        Options for method **string**:

        | Key              | Description                                                       |
        | ---------------- | ------------------------------------------------------------------|
        | min              | The minimum length of the string (ignored if length is given)     |
        | max              | The maximum length of the API key (ignored if length is given)    |
        | length           | The length of the string                                          |
        | pool             | The characters used for the string generation                     |
        | batch            | The number of strings to generate                                 |
        | prefix           | A prefix for the string, a period (.) will be added automatically |

        Options for method **bytes**:

        | Key              | Description                                                       |
        | ---------------- | ------------------------------------------------------------------|
        | min              | The minimum length of the string (ignored if length is given)     |
        | max              | The maximum length of the API key (ignored if length is given)    |
        | length           | The length of the string                                          |
        | batch            | The number of strings to generate                                 |
        | prefix           | A prefix for the string, a period (.) will be added automatically |

        Options for method **base32**:

        | Key              | Description                                                       |
        | ---------------- | ------------------------------------------------------------------|
        | dashes           | Adds dashes (-) to the string                                     |
        | batch            | The number of strings to generate                                 |
        | prefix           | A prefix for the string, a period (.) will be added automatically |

        Options for method **base62**:

        | Key              | Description                                                       |
        | ---------------- | ------------------------------------------------------------------|
        | batch            | The number of strings to generate                                 |
        | prefix           | A prefix for the string, a period (.) will be added automatically |

        Options for method **uuidv4**:

        | Key              | Description                                                       |
        | ---------------- | ------------------------------------------------------------------|
        | dashes           | Adds dashes (-) to the string                                     |
        | batch            | The number of strings to generate                                 |
        | prefix           | A prefix for the string, a period (.) will be added automatically |

        Options for method **uuidv5**:

        | Key              | Description                                                       |
        | ---------------- | ------------------------------------------------------------------|
        | name             | A unique name to use for the generation                           |
        | namespace        | The UUID to use for the generation (ignored if batch is given)    |
        | dashes           | Adds dashes (-) to the string                                     |
        | batch            | The number of strings to generate                                 |
        | prefix           | A prefix for the string, a period (.) will be added automatically |
      tags:
        - Random
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  type: string
                  description: 'Allowed methods are `string`, `bytes`, `base32`, `base62`, `uuidv4`, `uuidv5`'
                  example: bytes
                length:
                  type: integer
                  format: int32
                  minimum: 1
                  maximum: 128
                  description: The length must be between `1` and `128`
                  example: 8
                min:
                  type: integer
                  format: int32
                  minimum: 1
                  description: Must be greater than `0` AND less than or equal to `max`
                  example: 1
                max:
                  type: integer
                  format: int32
                  maximum: 128
                  description: Must be greater than or equal to `1` or `min` AND less than or equal to `128`
                  example: 42
                pool:
                  type: string
                  description: The characters used for the string generation
                  example: ABCDEF123456789
                prefix:
                  type: string
                  description: 'A prefix for the string, a period (.) will be added automatically'
                  example: wd
                batch:
                  type: integer
                  format: int32
                  description: Must be greater than or equal to `1` AND less than or equal to `100`
                  example: 5
                dashes:
                  type: boolean
                  description: Adds dashes (-) to the string
                  example: true
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: string
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /number:
    post:
      summary: Random Number Generator
      operationId: number
      description: Generate random numbers.
      tags:
        - Random
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                min:
                  type: integer
                  format: int32
                  minimum: 1
                  description: Must be greater than `0` AND less than or equal to `max`
                  example: 1
                max:
                  type: integer
                  format: int32
                  maximum: 9007199254740991
                  description: Must be greater than or equal to `1` or `min` AND less than or equal to `9.007.199.254.740.991`
                  example: 42
                batch:
                  type: integer
                  format: int32
                  description: Must be greater than or equal to `1` AND less than or equal to `100`
                  example: 5
              required:
                - min
                - max
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: integer
                        format: int32
                        example: 42
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /urlshorteners:
    get:
      summary: Gets all url shorteners
      operationId: getShortUrls
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.

        Shorten urls are bound to the user who owns the api-key. This is an endpoint to retrieve all these shorten urls.
      tags:
        - UrlShortener
      security:
        - ApiKey: []
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                          original_url:
                            type: string
                          short_url:
                            type: string
                          code:
                            type: string
                          clicks:
                            type: integer
                            format: int32
                          created_at:
                            type: string
                            format: date-time
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /urlshortener:
    post:
      summary: Shorts a given URL
      operationId: shortUrl
      description: |
        `Public`, `Member` & `Subscriber` Endpoint. API-Key not necessary.

        If `x-api-key` is supplied, then the short-urls are assigned to the user who owns the api-key. So you can query all short-urls and get more information, like the number of clicks. You can also remove them with the delete endpoint.

        Available shortener domains are: "xfive.de", "xtc5.de"

        If "custom_id" is passed with payload, random id will not be generated and your custom id will be used, if its available.

        Returns the short url.
      tags:
        - UrlShortener
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                original_url:
                  type: string
                domain:
                  type: string
                custom_id:
                  type: string
              required:
                - original_url
                - domain
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: string
                        format: url
                        description: Returns the shorten url
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  '/urlshortener/{id}':
    delete:
      summary: Deletes a given url shortener object.
      operationId: deleteShortUrl
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.
      tags:
        - UrlShortener
      security:
        - ApiKey: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: UUID of the shorten url
          required: true
      responses:
        '204':
          description: Null Response
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /captcha:
    get:
      summary: Create unique captcha
      operationId: captcha
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.

        Creates a captcha image and delivers it as base64 string along with its value. So you can just show the image to your user and check their input against the delivered captcha value.
      tags:
        - Utility
      security:
        - ApiKey: []
      parameters:
        - in: query
          name: length
          description: |
            Length of the captcha. Must be greater than `1`. 

            Specifies how many characters to select from the character set pool.

            Default is: 6
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: height
          description: |
            Height of the captcha in pixels. Must be greater than `1`. 

            Default is: 100
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: width
          description: |
            Width of the captcha in pixels. Must be greater than `1`. 

            Default is: 200
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: charset
          description: |
            Charset for the captcha. Must contain at least `1` character. 

            Default is: 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          value:
                            type: string
                          width:
                            type: integer
                            format: int32
                          height:
                            type: integer
                            format: int32
                          image:
                            type: string
                            format: base64
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /compile:
    post:
      summary: Compile code and get the output
      operationId: compile
      description: |
        `Subscriber` Only Endpoint. API-Key is needed.

        Supported languages are: "c", "cpp", "js", "python"

        For each language are some options available:

        **c**
        | Key              | Description                                                   |
        | ---------------- | --------------------------------------------------------------|
        | std              | Sets the standard library for the compilation                 |
        Available **std** values are: "c99", "c11","c17", "c18"                          

        ---

        **cpp**
        | Key              | Description                                                   |
        | ---------------- | --------------------------------------------------------------|
        | std              | Sets the standard library for the compilation                 |
        Available **std** values are: "c++98","c++03", "c++11", "c++14", "c++17"         

        ---

        **python**
        | Key              | Description                                                   |
        | ---------------- | --------------------------------------------------------------|
        | version          | Sets the python version, default is: 3                        |
        Available **version** values are: 2, 3                                           
      tags:
        - Utility
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                language:
                  type: string
                  description: 'Available languages are `c`, `cpp`, `js` and `python`'
                code:
                  type: string
                  format: base64
                  description: Provide the code as base64 string to avoid character escapes.
                std:
                  type: string
                  description: For `C` and `C++` only.
                version:
                  type: integer
                  format: int32
                  description: For `Python` only.
              required:
                - language
                - code
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          source:
                            type: string
                            description: Defines the source of the response. Can be `compiler` or `runtime`
                          result:
                            type: string
                            description: Output of the given code.
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /decode:
    post:
      summary: 'Decode text to base64, utf8, utf16le, hex, ascii and latin1'
      operationId: decode
      description: |
        Decodes given text into various formats

        Allowed **from** values are: base64, utf8, utf16le, hex, ascii and latin1
      tags:
        - Utility
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: Any string to decode into various formats
                  example: My string to decode
                from:
                  type: string
                  description: 'Define what type your string is -> "base64", "utf8", "utf16le", "latin1", "hex" or "ascii"'
                  example: base64
              required:
                - text
                - from
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          base64:
                            type: string
                            format: base64
                          utf8:
                            type: string
                            format: utf8
                          utf16le:
                            type: string
                            format: utf16le
                          latin1:
                            type: string
                            format: latin1
                          hex:
                            type: string
                            format: hex
                          ascii:
                            type: string
                            format: ascii
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /encode:
    post:
      summary: 'Encode text to base64, utf8, utf16le, hex, ascii and latin1'
      operationId: encode
      description: |
        Encodes given text into various formats

        Allowed **from** values are: base64, utf8, utf16le, hex, ascii and latin1
      tags:
        - Utility
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: Any string to encode into various formats
                  example: My string to encode
                from:
                  type: string
                  description: 'Define what type your string is -> "base64", "utf8", "utf16le", "latin1", "hex" or "ascii"'
                  example: ascii
              required:
                - text
                - from
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          base64:
                            type: string
                            format: base64
                          utf8:
                            type: string
                            format: utf8
                          utf16le:
                            type: string
                            format: utf16le
                          latin1:
                            type: string
                            format: latin1
                          hex:
                            type: string
                            format: hex
                          ascii:
                            type: string
                            format: ascii
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  '/geoip/{ip}':
    get:
      summary: Get geolocation information about an IPv4 or IPv6 address.
      operationId: geoip
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.
      tags:
        - Utility
      security:
        - ApiKey: []
      parameters:
        - in: path
          name: ip
          schema:
            type: string
            format: ip
          description: IPv4 or IPv6 address
          required: true
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          city:
                            type: object
                            properties:
                              geoname_id:
                                type: integer
                                format: int32
                              names:
                                type: object
                                properties:
                                  de:
                                    type: string
                                  en:
                                    type: string
                                  es:
                                    type: string
                                  fr:
                                    type: string
                                  ja:
                                    type: string
                                  pt_BR:
                                    type: string
                                  ru:
                                    type: string
                                  zh-CN:
                                    type: string
                          continent:
                            type: object
                            properties:
                              code:
                                type: string
                              geoname_id:
                                type: integer
                                format: int32
                              names:
                                type: object
                                properties:
                                  de:
                                    type: string
                                  en:
                                    type: string
                                  es:
                                    type: string
                                  fr:
                                    type: string
                                  ja:
                                    type: string
                                  pt_BR:
                                    type: string
                                  ru:
                                    type: string
                                  zh-CN:
                                    type: string
                          country:
                            type: object
                            properties:
                              geoname_id:
                                type: integer
                                format: int32
                              is_in_european_union:
                                type: boolean
                              iso_code:
                                type: string
                              names:
                                type: object
                                properties:
                                  de:
                                    type: string
                                  en:
                                    type: string
                                  es:
                                    type: string
                                  fr:
                                    type: string
                                  ja:
                                    type: string
                                  pt_BR:
                                    type: string
                                  ru:
                                    type: string
                                  zh-CN:
                                    type: string
                          location:
                            type: object
                            properties:
                              accuracy_radius:
                                type: integer
                                format: int32
                              latitude:
                                type: integer
                                format: int32
                              longitude:
                                type: integer
                                format: int32
                              time_zone:
                                type: string
                          registered_country:
                            type: object
                            properties:
                              geoname_id:
                                type: integer
                                format: int32
                              is_in_european_union:
                                type: boolean
                              iso_code:
                                type: string
                              names:
                                type: object
                                properties:
                                  de:
                                    type: string
                                  en:
                                    type: string
                                  es:
                                    type: string
                                  fr:
                                    type: string
                                  ja:
                                    type: string
                                  pt_BR:
                                    type: string
                                  ru:
                                    type: string
                                  zh-CN:
                                    type: string
                          subdivisions:
                            type: object
                            properties:
                              geoname_id:
                                type: integer
                                format: int32
                              iso_code:
                                type: string
                              names:
                                type: object
                                properties:
                                  de:
                                    type: string
                                  en:
                                    type: string
                                  es:
                                    type: string
                                  fr:
                                    type: string
                                  ja:
                                    type: string
                                  pt_BR:
                                    type: string
                                  ru:
                                    type: string
                                  zh-CN:
                                    type: string
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /hash:
    post:
      summary: Hashes a text into various formats
      operationId: hash
      description: |
        Hashes given text into various formats
      tags:
        - Utility
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: Any string to hash into various formats
                  example: My string to hash
              required:
                - text
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          RSA-MD5:
                            type: string
                          RSA-RIPEMD160:
                            type: string
                          RSA-SHA1:
                            type: string
                          RSA-SHA1-2:
                            type: string
                          RSA-SHA224:
                            type: string
                          RSA-SHA256:
                            type: string
                          RSA-SHA3-224:
                            type: string
                          RSA-SHA3-256:
                            type: string
                          RSA-SHA3-384:
                            type: string
                          RSA-SHA3-512:
                            type: string
                          RSA-SHA384:
                            type: string
                          RSA-SHA512:
                            type: string
                          RSA-SHA512/224:
                            type: string
                          RSA-SHA512/256:
                            type: string
                          RSA-SM3:
                            type: string
                          blake2b512:
                            type: string
                          blake2s256:
                            type: string
                          id-rsassa-pkcs1-v1_5-with-sha3-224:
                            type: string
                          id-rsassa-pkcs1-v1_5-with-sha3-256:
                            type: string
                          id-rsassa-pkcs1-v1_5-with-sha3-384:
                            type: string
                          id-rsassa-pkcs1-v1_5-with-sha3-512:
                            type: string
                          md5:
                            type: string
                          md5-sha1:
                            type: string
                          md5WithRSAEncryption:
                            type: string
                          ripemd:
                            type: string
                          ripemd160:
                            type: string
                          ripemd160WithRSA:
                            type: string
                          rmd160:
                            type: string
                          sha1:
                            type: string
                          sha1WithRSAEncryption:
                            type: string
                          sha224:
                            type: string
                          sha224WithRSAEncryption:
                            type: string
                          sha256:
                            type: string
                          sha256WithRSAEncryption:
                            type: string
                          sha3-224:
                            type: string
                          sha3-256:
                            type: string
                          sha3-384:
                            type: string
                          sha3-512:
                            type: string
                          sha384:
                            type: string
                          sha384WithRSAEncryption:
                            type: string
                          sha512:
                            type: string
                          sha512-224:
                            type: string
                          sha512-224WithRSAEncryption:
                            type: string
                          sha512-256:
                            type: string
                          sha512-256WithRSAEncryption:
                            type: string
                          sha512WithRSAEncryption:
                            type: string
                          shake128:
                            type: string
                          shake256:
                            type: string
                          sm3:
                            type: string
                          sm3WithRSAEncryption:
                            type: string
                          ssl3-md5:
                            type: string
                          ssl3-sha1:
                            type: string
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /qrcode:
    post:
      summary: Create QR Code (Quick Response Code)
      operationId: qrcode
      description: "`Member` & `Subscriber` Endpoint. API-Key is needed.\n\n| Option\t\t\t\t\t            | Defaults\t\t| Description\t\t\t\t\t\t\t\t\t\t\t\t                            |\n| --------------------------- | ----------- | ------------------------------------------------------------- |\n| text\t\t\t\t\t\t            | ''\t\t\t    | Text\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                            |\n| width\t\t\t\t\t\t            | 256\t\t\t    | Width\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                            |\n| height\t\t\t\t\t\t          | 256\t\t\t    | Height\t\t\t\t\t\t\t\t\t\t\t\t\t\t                            |\n| colorDark\t\t\t\t\t          | #000000\t\t  | Dark hex color\t\t\t\t\t\t\t\t\t\t\t\t                        |\n| colorLight\t\t\t\t\t        | #ffffff\t\t  | Light hex color\t\t\t\t\t\t\t\t\t\t\t\t                        |\n| logo\t\t\t\t\t\t            | undefined\t\t| URL\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                              |\n| logoWidth\t\t\t\t\t          | width/3.5\t\t| Fixed logo width\t\t\t\t\t\t\t\t\t\t\t\t                      |\n| logoHeight\t\t\t\t\t        | height/3.5\t| Fixed logo height\t\t\t\t\t\t\t\t\t\t\t\t                      |\n| logoBackgroundTransparent\t  | false\t\t\t  | Transparency. When true, logoBackgroundColor is invalid\t\t    |\n| logoBackgroundColor\t\t\t    | #ffffff\t\t  | Set background hex color when image background transparent    |\n| backgroundImage\t\t\t\t      | undefined\t\t| URL\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                              |\n| backgroundImageAlpha\t\t    | 1.0\t\t\t    | Background image transparency. Ranges: 0 - 1.0\t\t\t\t        |\n"
      tags:
        - Utility
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: The text which should be coded into the qrcode
                  example: Wild Devs Community
                width:
                  type: integer
                  format: int32
                  description: Width in pixels
                height:
                  type: integer
                  format: int32
                  description: Height in pixels
                colorDark:
                  type: string
                  format: hex
                  description: 'Color in hex-code format, E.g. `#EE5519`'
                colorLight:
                  type: string
                  format: hex
                  description: 'Color in hex-code format, E.g. `#EE5519`'
                logo:
                  type: string
                  format: url
                  description: Provide the URL to the image which should be embedded into the qrcode
                logoWidth:
                  type: integer
                  format: int32
                  description: Width in pixels
                logoHeight:
                  type: integer
                  format: int32
                  description: Height in pixels
                logoBackgroundColor:
                  type: string
                  format: hex
                  description: 'Color in hex-code format, E.g. `#EE5519`'
                logoBackgroundTransparent:
                  type: boolean
                backgroundImage:
                  type: string
                  format: url
                  description: Provide the URL to the background image which should be embedded into the qrcode
                backgroundImageAlpha:
                  type: number
                  minimum: 0
                  maximum: 1
                  format: float
                  description: Must be greater than or equal to `0` AND less than or equal to `1`
              required:
                - text
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: string
                        format: base64
                        description: QRCode will be provided as base64.
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /nsfw:
    post:
      summary: NSFW (Not Safe For Work) Image Checker
      operationId: nsfw
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.

        This endpoint is powered by machine learning and uses a trained model to rate the image.

        You have two options to provide the image.

        JSON:
          - url: Provide the url to the image (Supported formats are: BMP, JPEG, PNG)

        Multipart/form-data: 
          - image: Provide the image as binary (upload)
      tags:
        - Utility
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: |
                    The URL to the image. Supported formats are: BMP, JPEG, PNG
              required:
                - url
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          Neutral:
                            type: number
                            format: float
                          Drawing:
                            type: number
                            format: float
                          Hentai:
                            type: number
                            format: float
                          Porn:
                            type: number
                            format: float
                          Sexy:
                            type: number
                            format: float
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /bic:
    post:
      summary: Check if the given bic (Bank Identification Code) or SWIFT code is valid.
      operationId: bic
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bic:
                  type: string
              required:
                - bic
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /btc:
    post:
      summary: Check if the given bitcoin address is valid.
      operationId: btc
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                  description: bitcoin address
              required:
                - address
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /creditcard:
    post:
      summary: Check if the given creditcard number is valid.
      operationId: creditcard
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                number:
                  type: string
              required:
                - number
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /ean:
    post:
      summary: Check if the given ean (European Article Number) is valid.
      operationId: ean
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.
        The International Article Number (also known as European Article Number or EAN) is a standard describing a barcode symbology and numbering system used in global trade to identify a specific retail product type, in a specific packaging configuration, from a specific manufacturer.
          
        The most commonly used EAN standard is the thirteen-digit EAN-13, a superset of the original 12-digit Universal Product Code (UPC-A) standard developed in 1970 by George J. Laurer.[1] An EAN-13 number includes a 3-digit GS1 prefix (indicating country of registration or special type of product). A prefix with a first digit of "0" indicates a 12-digit UPC-A code follows. A prefix with first two digits of "45" or "49" indicates a Japanese Article Number (JAN) follows.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ean:
                  type: string
              required:
                - ean
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /email:
    post:
      summary: Check if the given email is valid
      operationId: email
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.

        Valid payload options: "email", "allow_display_name", "require_display_name", "allow_utf8_local_part", "allow_ip_domain", "domain_specific_validation", "blacklisted_chars", "host_blacklist", "host_whitelist", "mx"   

        If **allow_display_name** is set to true, the validator will also match Display Name <email-address>. 

        If **require_display_name** is set to true, the validator will reject strings without the format Display Name <email-address>. 

        If **allow_utf8_local_part** is set to false, the validator will not allow any non-English UTF8 character in email address' local part. 

        If **allow_ip_domain** is set to true, the validator will allow IP addresses in the host part.

        If **domain_specific_validation** is true, some additional validation will be enabled, e.g. disallowing certain syntactically valid email addresses that are rejected by Gmail. 

        If **blacklisted_chars** receives a string, then the validator will reject emails that include any of the characters in the string, in the name part. 

        If **host_blacklist** is set to an array of strings and the part of the email after the @ symbol matches one of the strings defined in it, the validation fails. 

        If **host_whitelist** is set to an array of strings and the part of the email after the @ symbol matches none of the strings defined in it, the validation fails.

        if **mx** is set to true, the validator will do a mx record check on the domain of the email.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: email address to check
                  example: info@wild-devs.net
                allow_display_name:
                  type: boolean
                  description: 'If is set to true, the validator will also match `Display Name <email-address>` format.'
                require_display_name:
                  type: boolean
                  description: 'If is set to true, the validator will reject strings without the `Display Name <email-address>` format.'
                allow_utf8_local_part:
                  type: boolean
                  description: 'If is set to false, the validator will not allow any non-English UTF8 character in email address'' local part.'
                allow_ip_domain:
                  type: boolean
                  description: 'If is set to true, the validator will allow IP addresses in the host part.'
                domain_specific_validation:
                  type: boolean
                  description: 'If is set to true, some additional validation will be enabled, e.g. disallowing certain syntactically valid email addresses that are rejected by Gmail.'
                blacklisted_chars:
                  type: string
                  description: 'If receives a string, then the validator will reject emails that include any of the characters in the string, in the name part.'
                host_blacklist:
                  type: array
                  items:
                    type: string
                  description: 'If is set to an array of strings and the part of the email after the @ symbol matches one of the strings defined in it, the validation fails.'
                host_whitelist:
                  type: array
                  items:
                    type: string
                  description: 'If is set to an array of strings and the part of the email after the @ symbol matches none of the strings defined in it, the validation fails.'
                mx:
                  type: boolean
                  description: 'if is set to true, the validator will do a mx record check on the domain of the email.'
              required:
                - email
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          valid:
                            type: boolean
                          mx:
                            description: only when `mx` is set to true
                            type: object
                            properties:
                              exchange:
                                type: string
                                description: the domain of the mail-server behind the email address
                              valid:
                                type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /eth:
    post:
      summary: Check if the given ethereum address is valid.
      operationId: eth
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                  description: ethereum address
              required:
                - address
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /fqdn:
    post:
      summary: Check if the given fqdn (fully qualified domain name) is valid.
      operationId: fqdn
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fqdn:
                  type: string
              required:
                - fqdn
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /iban:
    post:
      summary: Check if the given IBAN (International Bank Account Number) is valid.
      operationId: iban
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                iban:
                  type: string
              required:
                - iban
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /identitycard:
    post:
      summary: Check if the given identity card code is valid.
      operationId: identitycard
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identity:
                  type: string
              required:
                - identity
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /imei:
    post:
      summary: Check if the given IMEI number is valid.
      operationId: imei
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.

        IMEI should be of format `###############` or `##-######-######-#`

        options: **allow_hyphens** 

        Defaults to first format. If **allow_hyphens** is set to true, the validator will validate the second format.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imei:
                  type: string
                allow_hyphens:
                  type: boolean
                  description: |
                    IMEI should be of format `###############` or `##-######-######-#`.

                    Defaults to first format. If is set to true, the validator will validate the second format.
              required:
                - imei
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /ip:
    post:
      summary: Check if the given IP (version 4 or 6) address is valid.
      operationId: ip
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ip:
                  type: string
              required:
                - ip
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /isbn:
    post:
      summary: Check if the given ISBN (International Standard Book Number) is valid.
      operationId: isbn
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.

        The International Standard Book Number (ISBN) is a numeric commercial book identifier that is intended to be unique.

        The 10-digit ISBN format was developed by the International Organization for Standardization (ISO) and was published in 1970 as international standard ISO 2108 (the 9-digit SBN code can be converted to a 10-digit ISBN by prefixing it with a zero).
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isbn:
                  type: string
              required:
                - isbn
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /isin:
    post:
      summary: Check if the given ISIN (stock/security identifier) is valid.
      operationId: isin
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isin:
                  type: string
              required:
                - isin
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /issn:
    post:
      summary: Check if the given ISSN (International Standard Serial Number) is valid.
      operationId: issn
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.

        An International Standard Serial Number (ISSN) is an eight-digit serial number used to uniquely identify a serial publication, such as a magazine. The ISSN is especially helpful in distinguishing between serials with the same title. ISSNs are used in ordering, cataloging, interlibrary loans, and other practices in connection with serial literature.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                issn:
                  type: string
              required:
                - issn
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /licenseplate:
    post:
      summary: Check if the given string matches the format of a country's license plate.
      operationId: licenseplate
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.

        Supported locales: 
        ```
          cs-CZ
          de-DE
          de-LI
          en-IN
          es-AR
          hu-HU
          pt-BR
          pt-PT
          sq-AL
          sv-SE 
          any
        ```

        If `any` is used, endpoint will check if any of the locales match.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                licenseplate:
                  type: string
                locale:
                  type: string
              required:
                - licenseplate
                - locale
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /mac:
    post:
      summary: Check if the given MAC address is valid.
      operationId: mac
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.

        options: **no_separators**
            
        If **no_separators** is true, the validator will allow MAC addresses without separators. Also, it allows the use of hyphens, spaces or dots e.g. '01 02 03 04 05 ab', '01-02-03-04-05-ab' or '0102.0304.05ab'. The options also allow a EUI property to specify if it needs to be validated against EUI-48 or EUI-64. The accepted values of EUI are 48, 64.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                no_separators:
                  type: boolean
                  description: 'If is true, the validator will allow MAC addresses without separators. Also, it allows the use of hyphens, spaces or dots e.g. ''01 02 03 04 05 ab'', ''01-02-03-04-05-ab'' or ''0102.0304.05ab''. The options also allow a eui property to specify if it needs to be validated against EUI-48 or EUI-64. The accepted values of EUI are 48, 64.'
              required:
                - address
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /magnet:
    post:
      summary: Check if the given Magnet URI format is valid.
      operationId: magnet
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.

        Magnet is a URI scheme that defines the format of magnet links, a de facto standard for identifying files (URN) by their content, via cryptographic hash value rather than by their location.

        Although magnet links can be used in a number of contexts, they are particularly useful in peer-to-peer file sharing networks because they allow resources to be referred to without the need for a continuously available host, and can be generated by anyone who already has the file, without the need for a central authority to issue them. This makes them popular for use as "guaranteed" search terms within the file sharing community where anyone can distribute a magnet link to ensure that the resource retrieved by that link is the one intended, regardless of how it is retrieved.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                magnet:
                  type: string
              required:
                - magnet
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /mimetype:
    post:
      summary: Check if the given MIME type format is valid.
      operationId: mimetype
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.

        A media type (also known as a MIME type) is a two-part identifier for file formats and format contents transmitted on the Internet. The Internet Assigned Numbers Authority (IANA) is the official authority for the standardization and publication of these classifications. Media types were originally defined in Request for Comments RFC 2045 (MIME) 
            
        Format of Internet Message Bodies (Nov 1996) in November 1996 as a part of the MIME (Multipurpose Internet Mail Extensions) specification, for denoting type of email message content and attachments; hence the original name, MIME type. Media types are also used by other internet protocols such as HTTP and document file formats such as HTML, for similar purposes.

        **Common examples:**

        ```
        application/javascript
        application/json
        application/ld+json
        application/msword (.doc)
        application/pdf
        application/sql
        application/vnd.api+json
        application/vnd.ms-excel (.xls)
        application/vnd.ms-powerpoint (.ppt)
        application/vnd.oasis.opendocument.text (.odt)
        application/vnd.openxmlformats-officedocument.presentationml.presentation (.pptx)
        application/vnd.openxmlformats-officedocument.spreadsheetml.sheet (.xlsx)
        application/vnd.openxmlformats-officedocument.wordprocessingml.document (.docx)
        application/x-www-form-urlencoded
        application/xml
        application/zip
        application/zstd (.zst)
        audio/mpeg
        audio/ogg
        image/avif
        image/jpeg (.jpg, .jpeg, .jfif, .pjpeg, .pjp)
        image/png
        image/svg+xml (.svg)
        model/obj (.obj)
        multipart/form-data
        text/plain
        text/css
        text/csv
        text/html
        text/xml
        ```
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mimetype:
                  type: string
              required:
                - mimetype
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /password:
    post:
      summary: Check if the given string can be considered a strong password or not.
      operationId: password
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.

        Allows for custom requirements or scoring rules. If `returnScore` is true, then the function returns an integer score for the password rather than a boolean.

        Options: "minLength", "minLowercase", "minUppercase", "minNumbers", "minSymbols", "returnScore", "pointsPerUnique", "pointsPerRepeat", "pointsForContainingLower", "pointsForContainingUpper", "pointsForContainingNumber", "pointsForContainingSymbol"

        Default options are:

        { minLength: 8, minLowercase: 1, minUppercase: 1, minNumbers: 1, minSymbols: 1, returnScore: false, pointsPerUnique: 1, pointsPerRepeat: 0.5, pointsForContainingLower: 10, pointsForContainingUpper: 10, pointsForContainingNumber: 10, pointsForContainingSymbol: 10 }
          
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                minLength:
                  type: integer
                  format: int32
                minLowercase:
                  type: integer
                  format: int32
                minUppercase:
                  type: integer
                  format: int32
                minNumbers:
                  type: integer
                  format: int32
                minSymbols:
                  type: integer
                  format: int32
                returnScore:
                  type: boolean
                  description: 'If is true, then the endpoint returns an integer score for the password rather than a boolean.'
                pointsPerUnique:
                  type: integer
                  format: int32
                pointsPerRepeat:
                  type: integer
                  format: int32
                pointsForContainingLower:
                  type: integer
                  format: int32
                pointsForContainingUpper:
                  type: integer
                  format: int32
                pointsForContainingNumber:
                  type: integer
                  format: int32
                pointsForContainingSymbol:
                  type: integer
                  format: int32
              required:
                - password
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /postalcode:
    post:
      summary: Check if the given Postalcode is valid.
      operationId: postalcode
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.

        Supported locales:
        ```
          AD
          AT
          AU
          AZ
          BA
          BE
          BG
          BR
          BY
          CA
          CH
          CN
          CZ
          DE
          DK
          DO
          DZ
          EE
          ES
          FI
          FR
          GB
          GR
          HR
          HT
          HU
          ID
          IE
          IL
          IN
          IR
          IS
          IT
          JP
          KE
          KR
          LI
          LK
          LT
          LU
          LV
          MG
          MT
          MX
          MY
          NL
          NO
          NP
          NZ
          PL
          PR
          PT
          RO
          RU
          SA
          SE
          SG
          SI
          SK
          TH
          TN
          TW
          UA
          US
          ZA
          ZM 
          any 
        ```

        If `any` is used, endpoint will check if any of the locales match.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postalcode:
                  type: string
              required:
                - postalcode
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /semver:
    post:
      summary: Check if the given Semver (Semantic Versioning Specification) is valid.
      operationId: semver
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                semver:
                  type: string
              required:
                - semver
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /tax:
    post:
      summary: Check if the given Tax Identification Number is valid.
      operationId: tax
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.

        Supported locales: 
        ```
          bg-BG
          cs-CZ
          de-AT
          de-DE
          dk-DK
          el-CY
          el-GR
          en-CA
          en-GB
          en-IE
          en-US
          es-ES
          et-EE
          fi-FI
          fr-BE
          fr-CA
          fr-FR
          fr-LU
          hr-HR
          hu-HU
          it-IT
          lb-LU
          lt-LT
          lv-LV
          mt-MT
          nl-BE
          nl-NL
          pl-PL
          pt-BR
          pt-PT
          ro-RO
          sk-SK
          sl-SI
          sv-SE
        ```
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tax:
                  type: string
                locale:
                  type: string
              required:
                - tax
                - locale
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
  /uuid:
    post:
      summary: 'Check if the given UUID (version 1, 2, 3, 4 or 5) is valid.'
      operationId: uuid
      description: |
        `Member` & `Subscriber` Endpoint. API-Key is needed.
      tags:
        - Validation
      security:
        - ApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
              required:
                - uuid
      responses:
        '200':
          description: Expected Response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: success
                      code:
                        type: integer
                        format: int32
                        example: 200
                      message:
                        type: string
                        example: OK
                  - type: object
                    properties:
                      data:
                        type: boolean
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '401':
          description: Unauthorized Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '429':
          description: Too Many Requests Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  note:
                    type: string
components:
  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: x-api-key
